package demoApi;


import static io.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.SkipException;
import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.relevantcodes.extentreports.LogStatus;


import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class TestApi extends TestSetup {

	@Test()
	public void testAssuredAPI() {
		infoTest("Starting Testcase Validation for testAssuredAPI "); 
		boolean CanRelist = false;
		String NameInJson= "";
		String BaseURL = "https://api.tmsandbox.co.nz";
		RestAssured.baseURI = BaseURL;
		
		
		///////////////////////// Request validation //////////////////////////
		RequestSpecBuilder reqBuild= new  RequestSpecBuilder();
		reqBuild.addParam("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
		reqBuild.addParam("Connection", "keep-alive");
		reqBuild.addParam("Host", "api.tmsandbox.co.nz");
		RequestSpecification reqSpecificsation=reqBuild.build();
	

		
		
		Response res =  given().spec(reqSpecificsation).
					 when().get("/v1/Categories/6327/Details.json?catalogue=false").
					 then().header("Accept-Ranges", "bytes").
					 assertThat().statusCode(200).contentType(ContentType.JSON).extract().response();
		

		
		String response = res.asString();
		JsonPath FullResponse = new JsonPath(response);
		infoTest(" Following response generated by server  >>  "+ response); 
		////////////////// Get the Relist value /////////////////
		try {
			CanRelist = FullResponse.getBoolean("CanRelist");
			passTest("Expected True CanRelist value found ");
		}catch (Exception e) {
			failTest("All the expected criteria not found. API validation FAIL ");
		}
		
		//////////////////Get the Name value /////////////////
		NameInJson= FullResponse.getString("Name");	
		
		//////////search validation for Gallery and 2x larger image "  ////////// 
		List<Map<String, String>> companies  = FullResponse.getList("Promotions");			
		boolean foundFlg = false;
		for(int i =0 ; i<companies.size(); i++) {
			if(companies.get(i).get("Name").equals("Gallery") && companies.get(i).get("Description").contains("2x larger image")) {
				passTest("Expected Name as Gallery and Description as 2X larger image value found in Promotion node >> and child node >>"+ i+1);
				foundFlg = true;
				break;
			}			
		}
		
		if (foundFlg && CanRelist && NameInJson.trim().equals("Carbon credits")) {
			passTest( "All 3 expected criteria (CanRelist, Name and Description)found. API validation PASS ");
			System.out.println("All the expected criteria found. API validation PASS ");
		}else {
			failTest( "All the expected criteria not found. API validation FAIL ");
			System.out.println("All the expected criteria found. API validation FAIL ");
		}
		
		
		infoTest("Execution Completed");
		

	}
	
	

}
